general:
  berlin-walk:
    query: "layout=(explanation30-map)/source&explanation=md:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.md&map=map:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json&source=json:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json"
    delay: 5000
  empty-layout:
    query: "layout="
  illegal-layout:
    query: "layout=a/"
  missing-view:
    query: "layout=a/b&a=text:inline:This is fine"
  illegal-view:
    query: "layout=a/b&a=text:inline:This is fine&b=4124"
  misspelled-view:
    query: "layout=a/b&a=text:inline:This is fine&b=marmeid"
  nonsense-view:
    query: "layout=a/b&a=text:inline:This is fine&b=nonsense"
  view-error-duplicate-map-layer:
    query: "layout=a/b&a=text:inline:This is fine&b=map:$geojson;$geojson&$geojson=https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json"
  open-modal-select-view:
    query: "layout=banner/capitals60&banner=text:inline:Select%20a%20capital!&capitals=(default=br)select:inline:{%20%22items%22:%20[%20{%20%22id%22:%20%22de%22,%20%22label%22:%20%22Germany%22,%20%22capital%22:%20%22Berlin%22%20},%20{%20%22id%22:%20%22ca%22,%20%22label%22:%20%22Canada%22,%20%22capital%22:%20%22Ottawa%22%20},%20{%20%22id%22:%20%22br%22,%20%22label%22:%20%22Brazil%22,%20%22capital%22:%20%22Brasilia%22%20}%20],%20%22parameters%22:%20{%20%22layout%22:%20%22a%22,%20%22a%22:%20%22text:inline:Welcome%20to%20${capital},%20capital%20of%20${label}!%22%20},%20%22modals%22:%20{%20%22Wikipedia%22:%20%22https://en.wikipedia.org/wiki/${capital}%22%20}%20}"
    delay: 8000
    onReadyScript: "open-first-modal-in-select-view-and-wait-iframe.js"
  update-content-on-edit-view:
    query: "layout=a/b&a=edit:$data&b=text:$data&$data=inline:Hello"
    delay: 8000
    onReadyScript: "update-editor-content.js"

handlers:
  frame:
    prefixes: [http, https, file]
    title: Regular Content
    description: HTTP/S URLs can be loaded and displayed in IFrames.
    examples:
      - query: "layout=a/b&a=https://wikipedia.org&b=https://example.com"
      - intro:
          If your browser environment permits it (e.g. if you build Flexivis locally and open it from a `file:` URL),
          you can also load content from `file:` URLs.
          This can be useful to visualise build outputs, for example.
        query: "layout=a/b&a=file://results.html&b=file://generated-image.png"
        screenshot: false

  markdown:
    prefixes: [md, md:inline]
    title: Markdown
    description: Render [Markdown](https://en.wikipedia.org/wiki/Markdown) content.
    examples:
      - query: "layout=a/b&a=md:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/markdown.md&b=md:inline:This pane contains **inline** Markdown content taken _from the URL_."

  json:
    prefixes: [json, json:inline]
    title: JSON
    description: Render JSON in an interactive viewer.
    examples:
      - query: 'layout=a/b&a=json:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/package-lock.json&b=json:inline:{"name": "inline JSON example", "id": 42, "values": ["foo", "baz", "bar"]}'

  text:
    prefixes: [text, text:inline]
    title: Text
    description: Display plain text. This can be used to display the source of a visualisation alongside the visualisation itself.
    examples:
      - query: "layout=(a-b)/c&a=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/plaintext.txt&b=text:inline:This is just _plain_ inline text from the URL&c=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/README.md"

  map:
    prefixes: [map, map:inline]
    title: Map
    description: |
      Renders GeoJSON documents on an interactive map.

      The view allows the following configurations:

      - `center`: the latitude/longitude to center the map, e.g. `52.554101,13.463528`.
      - `zoomLevel`: the zoom level of the map.
      - `layer`: the layer type.

      The resources can also be configured:

      - `hidden`: initially hide this resource.
      - `id`: an ID for the resource.

      The following view definition exemplifies how how to use the configurations:

      ```
      (center=52.554101,13.463528;zoomLevel=16;layer=osm)map:(id=walk;hidden)https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json
      ```

      Multiple resources can be displayed at once by separating them with `;`.
    examples:
      # TODO after fixing markdown display, use `md` instead of `text` to show JSON source
      - query: "layout=a/b&a=map:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json&b=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json"
        delay: 4000
      # TODO - 'map:inline:{"type": "Feature", "geometry": {"type": "Point", "coordinates": [6.140556, 46.226667]}, "properties": {"wikipedia": "https://en.wikipedia.org/wiki/Palace_of_Nations"}}'

  mermaid:
    prefixes: [mermaid, mermaid:inline]
    title: Mermaid Diagrams
    description: Renders [mermaid](https://mermaid-js.github.io/mermaid/) diagrams.
    examples:
      - query: 'layout=(a-b)/c&a=mermaid:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/mermaid.mmd&b=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/mermaid.mmd&c=mermaid:inline:graph TB; p[mermaid:inline prefix] --> URL; s[Mermaid source] --> URL -->%7CFlexivis%7C r[Rendered Diagram]'

  vega:
    prefixes: [vega, vega:inline]
    title: Vega Graphs
    description: Renders [Vega](https://vega.github.io/vega/) and [Vega-Lite](https://vega.github.io/vega-lite/) graphs.
    examples:
      # TODO after fixing markdown display, use `md` instead of `text` to show JSON source
      - query: "layout=(a-c30)/b&a=vega:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/cloc.json&b=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/cloc.json&c=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/cloc.csv"
      - intro: You can specify the graph by putting JSON in the URL. The JSON can then load values by URL (like the JSON shown in the previous example), or you can embed the values in the JSON.
        viewport: { width: 400, height: 400 }
        query: 'url=vega:inline:{"data": {"values": [{"factor": "awesomeness", "score": 10}, {"factor": "weirdness", "score": 3}, {"factor": "color", "score": 7}]}, "mark": "bar", "encoding": {"x": {"field": "factor", "type": "nominal"}, "y": {"field": "score", "type": "quantitative"}, "color": {"field": "factor", "type": "nominal"}}, "height": "container", "width": 100}'

  select:
    prefixes: [select, select:inline]
    title: Item Select
    description: |
      Accepts a list of items, and displays a customized view for each selection.

      This view expects a JSON resource with the following basic format:

      ```json
      {
        "items": [ ... ],
        "parameters": { ... },
        "modals": { ... }
      }
      ```

      `items` contain multiple JSON objects. Each object must contain an `id` field that uniquely identifies that item.
      Although optional, the field called `label` is also special. If set, that will the display name used by the Select view.
      Besides that, the objects can contain any other desired fields and values. The following is a valid example of the field:

      ```json
      {
        "items": [
          { "id": "de", "label": "Germany", "capital": "Berlin" },
          { "id": "ca", "label": "Canada", "capital": "Ottawa" },
          { "id": "br", "label": "Brazil", "capital": "Brasilia" }
        ]
      }
      ```

      `parameters` contains parameters that follow the URL parameter format accepted by Flexivis. However, they can also contain
      template expressions expresses by `${field}`, where the field is part of the items. For example:

      ```json
      {
        "parameters": {
          "layout": "a",
          "a": "text:inline:Welcome to ${capital}, capital of ${label}!"
        }
      }
      ```

      `modals` contains a list of modals that can be shown with further details for each item. For every modal defined, a button will
      be added to the page, using the key as the button label, and the value as the modal's view type. For instance:

      ```json
      {
        "modals": {
          "Wikipedia": "https://en.wikipedia.org/wiki/${capital}"
        }
      }
      ```

      The view permits the user to define the item that is initially selected by specifying the item's id under the `default` key.
    examples:
      - query: "layout=banner/capitals60&banner=text:inline:Select%20a%20capital!&capitals=(default=br)select:inline:%7B%22items%22%3A%5B%7B%22id%22%3A%22de%22%2C%22label%22%3A%22Germany%22%2C%22capital%22%3A%22Berlin%22%7D%2C%7B%22id%22%3A%22ca%22%2C%22label%22%3A%22Canada%22%2C%22capital%22%3A%22Ottawa%22%7D%2C%7B%22id%22%3A%22br%22%2C%22label%22%3A%22Brazil%22%2C%22capital%22%3A%22Brasilia%22%7D%5D%2C%22parameters%22%3A%7B%22layout%22%3A%22a%22%2C%22a%22%3A%22text%3Ainline%3AWelcome%20to%20%24%7Bcapital%7D%2C%20capital%20of%20%24%7Blabel%7D!%22%7D%2C%22modals%22%3A%7B%22Wikipedia%22%3A%22https%3A%2F%2Fen.wikipedia.org%2Fwiki%2F%24%7Bcapital%7D%22%7D%7D"
      - query: "url=select:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/select-view.json"
        delay: 25000

  tab:
    prefixes: ["tab", "tab:inline"]
    title: Tabs
    description: |
      Takes multiple view definitions and displays each one on a different tab.

      Tabs are defined using the following JSON model, where each entry in the `tabs` object defines a new tab:

      ```json
      {
        "tabs": {
          "TabName": "view:resource"
        }
      }
      ```

      The `default` config can contain the name of the tab that is selected by default.
    examples:
      - query: "url=tab:inline:{%22tabs%22:{%22Map%22:%22map:$data%22,%22JSON%22:%22edit:$data%22}}&$data=https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json"
        delay: 8000
      - query: "url=(default=JSON)tab:inline:{%22tabs%22:{%22Map%22:%22map:$data%22,%22JSON%22:%22edit:$data%22}}&$data=https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json"

  edit:
    prefixes: ["edit"]
    title: "Data Editor"
    description: |
      Allows editing data. Changes made are broadcasted when clicking the "Update" button.

      The editor will try to automatically detect the type of the content. However,
      a specific type can be enforced by using the `lang` config. `lang` can be set to any of the languages supported by Highlight.js.
      The list of supported values is available [here](https://github.com/highlightjs/highlight.js/blob/master/SUPPORTED_LANGUAGES.md).
    examples:
      - query: "layout=e/m&e=edit:$data&m=map:$data&$data=https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json"
        delay: 8000

  table:
    prefixes: ["table"]
    title: "Table Editor"
    description: |
      Allows editing multiple CSV data sources in a spreadsheet. Changes made are broadcasted automatically when changes are introduced.
    examples:
      - query: "layout=tables/textA/textB&textA=text:$a&textB=text:$b&tables=table:$a;$b&$a=inline:x,y,z&$b=inline:a,b,c"

  # TODO: Deal with README, which isn't documented here. Arguably it shouldn't be a named view handler.
